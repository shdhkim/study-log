# Vue 주요 개념 정리

## DOM 업데이트와 nextTick()

Vue에서는 상태(state)나 데이터가 변경되면 DOM이 자동으로 반응하여 업데이트됩니다. 하지만 이 DOM 업데이트는 **비동기적으로** 일어나므로, 데이터가 바뀐 직후 DOM에 접근하면 아직 변경 사항이 반영되지 않았을 수 있습니다. 이럴 때 `nextTick()`을 사용하면 DOM 업데이트가 완료된 후에 콜백 함수를 실행할 수 있도록 Vue에 요청할 수 있습니다.

## Props와 Emits

- **Props**는 부모 컴포넌트가 자식 컴포넌트에 값을 전달할 때 사용하는 속성입니다.
- **Emits**는 자식 컴포넌트가 부모 컴포넌트에게 이벤트를 전달할 때 사용하는 메커니즘입니다. 이를 통해 부모는 자식의 특정 동작에 반응할 수 있습니다.

## Provide와 Inject

`provide`와 `inject`는 **컴포넌트 간 데이터 전달**을 위한 또 다른 방법입니다. 이를 사용하면 중간 컴포넌트를 거치지 않고도 **상위 컴포넌트에서 하위 컴포넌트로 데이터 전달**이 가능합니다. 이 방식은 깊은 컴포넌트 구조에서도 유용합니다.

## Slot

`slot`은 자식 컴포넌트의 템플릿 안에 부모 컴포넌트가 콘텐츠를 끼워 넣을 수 있게 하는 기능입니다.

- **기본 슬롯**: 자식 컴포넌트가 제공하는 기본 슬롯 공간에 부모가 콘텐츠를 넣는 방식입니다.
- **이름 있는 슬롯 (Named Slot)**: 슬롯에 이름을 붙여 여러 위치에 서로 다른 콘텐츠를 삽입할 수 있습니다.
- **스코프 슬롯 (Scoped Slot)**: 자식 컴포넌트가 슬롯에 데이터를 넘기고, 부모 컴포넌트가 그 데이터를 받아서 사용하는 방식입니다.

## 렌더링과 마운팅

- **렌더링(Rendering)**: Vue는 컴포넌트가 어떻게 생겼는지를 계산하여 HTML 구조(DOM)를 만듭니다. 예를 들어 `<div><h1>안녕</h1></div>`와 같은 구조를 생성합니다.
- **마운팅(Mounting)**: 계산된 DOM 결과를 실제 브라우저에 붙여 사용자에게 보이게 만드는 과정입니다.

## 빌트인 컴포넌트 (Built-in Components)

Vue는 강력하고 유연한 **기본 제공 컴포넌트**를 제공합니다. 이들은 별도의 import 없이 바로 사용할 수 있으며, 다음과 같은 컴포넌트가 포함됩니다:

- `<component>`: 동적으로 다른 컴포넌트를 렌더링할 때 사용합니다.
- `<slot>`: 부모가 전달한 콘텐츠를 자식 컴포넌트 내부에 표시합니다.
- `<template>`: 렌더링되지 않는 가상 래퍼로, 조건부 렌더링이나 반복 구조에서 유용합니다.
- `<keep-alive>`: 컴포넌트의 상태를 메모리에 보존하여 다시 렌더링하지 않도록 합니다.
- `<transition>`: 컴포넌트나 엘리먼트에 진입/퇴장 애니메이션을 적용할 때 사용합니다.
- `<transition-group>`: 여러 요소에 애니메이션을 적용할 때 사용합니다.