도커(Docker) = 컨테이너 생성 및 실행 (배포 단위)
쿠버네티스(Kubernetes) = 컨테이너 오케스트레이션 (여러 컨테이너 관리)
Docker Compose와 Kubernetes는 여러 개의 컨테이너를 관리하는 도구라는 점에서 비슷하지만, 
어디서, 어떻게, 왜 사용하는지에 따라 차이가 있다.

비슷한 점
둘 다 컨테이너를 여러 개 실행하고 관리하는 도구
둘 다 YAML 파일을 사용해 설정을 정의
둘 다 컨테이너 간 네트워크를 구성 가능

다른 점
Docker Compose는 개발 환경용, Kubernetes는 운영 환경용
Compose는 단일 서버에서만 실행 가능, Kubernetes는 멀티 서버(클러스터링) 가능
Compose는 스케일링 & 복구 기능이 제한적, Kubernetes는 완전 자동화 가능

파인튜닝(Fine-Tuning) = 모델 자체를 업데이트해서 특정한 데이터에 최적화
RAG (Retrieval-Augmented Generation) = 모델을 바꾸지 않고 외부 데이터를 검색해서 활용

로그는 서버에서 사용자의 활동을 추적하는 데 사용됩니다.
쿠키는 사용자의 브라우저에 저장되는 정보로, 주로 로그인 유지나 개인화된 경험을 제공하는 데 사용됩니다.

OLTP(온라인 트랜잭션 처리, Online Transaction Processing)는 실시간으로 다수의 트랜잭션(거래)을 
빠르게 처리하는 시스템을 의미합니다.
주로 은행, 전자상거래, ERP, 예약 시스템 등에서 사용됩니다.

Stateful (상태 유지)
이전 상태를 기억하는 시스템

서버 또는 애플리케이션이 클라이언트의 요청 간에 상태(Session, Data)를 유지하는 방식.
같은 클라이언트가 여러 번 요청을 보내도, 이전 요청의 정보가 저장되어 있어야 함.
보통 데이터베이스(DB), 로그인 세션, 금융 거래 등에서 사용됨.

쿠버네티스 클러스터는 컨테이너 기반 애플리케이션을 실행하고 관리하는 서버 그룹
쿠버네티스 클러스터는 크게 마스터 노드(Control Plane)와 워크 노드(Worker Node)로 구성됩니다.

마스터 노드 (Control Plane)
클러스터를 제어하는 핵심 노드
전체 클러스터의 상태를 관리하고, 워커 노드에 컨테이너를 배포하는 역할
주요 구성 요소
API Server	 클러스터의 중심, 모든 요청을 처리하는 엔드포인트
Controller Manager	시스템 상태를 관리 (ex. 자동 복구, 확장)
Scheduler	어떤 워커 노드에서 컨테이너를 실행할지 결정
etcd	클러스터 설정 및 상태를 저장하는 분산 키-값 저장소

워커 노드 (Worker Node)
애플리케이션 컨테이너가 실행되는 노드
실제로 컨테이너가 배포되고 실행되는 곳
주요 구성 요소
Kubelet	노드에서 컨테이너를 실행하고 관리
Container Runtime	컨테이너를 실행하는 소프트웨어 (ex. containerd, CRI-O)
Kube Proxy	네트워크 트래픽을 관리하여 서비스 간 통신 지원